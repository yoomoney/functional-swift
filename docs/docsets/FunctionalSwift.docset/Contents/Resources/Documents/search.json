{"Typealiases.html#/s:15FunctionalSwift6Resulta":{"name":"Result","abstract":"<p>Result representation of <code>Ether</code> type where <code>left</code> value is <code>Error</code> and <code>right</code> value is success.</p>"},"Protocols/Monoid.html#/s:15FunctionalSwift6MonoidP6memptyxvpZ":{"name":"mempty","abstract":"<p>Identity of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Monoid.html#/s:15FunctionalSwift6MonoidP7mappendyxxF\">mappend(_:)</a></code>.</p>","parent_name":"Monoid"},"Protocols/Monoid.html#/s:15FunctionalSwift6MonoidP7mappendyxxF":{"name":"mappend(_:)","abstract":"<p>An associative operation.</p>","parent_name":"Monoid"},"Protocols/Monoid.html":{"name":"Monoid","abstract":"<p>The protocol of monoids (types with an associative binary operation that has an identity).</p>"},"Functions.html#/s:15FunctionalSwift5curryyq_xcq_xcr0_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq0_q_cxcq0_x_q_t_tcr1_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq1_q0_cq_cxcq1_x_q_q0_t_tcr2_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq2_q1_cq0_cq_cxcq2_x_q_q0_q1_t_tcr3_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq3_q2_cq1_cq0_cq_cxcq3_x_q_q0_q1_q2_t_tcr4_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq4_q3_cq2_cq1_cq0_cq_cxcq4_x_q_q0_q1_q2_q3_t_tcr5_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq5_q4_cq3_cq2_cq1_cq0_cq_cxcq5_x_q_q0_q1_q2_q3_q4_t_tcr6_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq6_q5_cq4_cq3_cq2_cq1_cq0_cq_cxcq6_x_q_q0_q1_q2_q3_q4_q5_t_tcr7_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq7_q6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq7_x_q_q0_q1_q2_q3_q4_q5_q6_t_tcr8_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq8_q7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq8_x_q_q0_q1_q2_q3_q4_q5_q6_q7_t_tcr9_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq9_q8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq9_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_t_tcr10_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq10_q9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq10_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_t_tcr11_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq11_q10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq11_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_t_tcr12_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq12_q11_cq10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq12_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_t_tcr13_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq13_q12_cq11_cq10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq13_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_t_tcr14_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq14_q13_cq12_cq11_cq10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq14_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_q13_t_tcr15_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq15_q14_cq13_cq12_cq11_cq10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq15_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_q13_q14_t_tcr16_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq16_q15_cq14_cq13_cq12_cq11_cq10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq16_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_q13_q14_q15_t_tcr17_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq17_q16_cq15_cq14_cq13_cq12_cq11_cq10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq17_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_q13_q14_q15_q16_t_tcr18_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift5curryyq18_q17_cq16_cq15_cq14_cq13_cq12_cq11_cq10_cq9_cq8_cq7_cq6_cq5_cq4_cq3_cq2_cq1_cq0_cq_cxcq18_x_q_q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_q10_q11_q12_q13_q14_q15_q16_q17_t_tcr19_lF":{"name":"curry(_:)","abstract":"<p>Undocumented</p>"},"Functions.html#/s:15FunctionalSwift3lxgoiySayq_Gq_xXE_SayxGtr0_lF":{"name":"<^>(_:_:)","abstract":"<p>An infix synonym for <code>map(_:)</code>.</p>"},"Functions.html#/s:15FunctionalSwift2lxoiySayxGx_Sayq_Gtr0_lF":{"name":"<^(_:_:)","abstract":"<p>Replace all locations in the input with the same value."},"Functions.html#/s:15FunctionalSwift2xgoiySayq_GSayxG_q_tr0_lF":{"name":"^>(_:_:)","abstract":"<p>Is flipped version of <code>&lt;^</code></p>"},"Functions.html#/s:15FunctionalSwift3ggsoiySayq_GSayxG_ACxXEtr0_lF":{"name":">>-(_:_:)","abstract":"<p>Sequentially compose two actions, passing any value produced by the first"},"Functions.html#/s:15FunctionalSwift3slloiySayq_GACxXE_SayxGtr0_lF":{"name":"-<<(_:_:)","abstract":"<p>Same as <code>&gt;&gt;-</code>, but with the arguments interchanged.</p>"},"Functions.html#/s:15FunctionalSwift3lmgoiySayq_GSayq_xcG_SayxGtr0_lF":{"name":"<*>(_:_:)","abstract":"<p>Sequential application.</p>"},"Functions.html#/s:15FunctionalSwift6liftA2ySayq0_Gq0_x_q_tXE_SayxGSayq_Gtr1_lF":{"name":"liftA2(_:_:_:)","abstract":"<p>Lift a binary function to actions.</p>"},"Functions.html#/s:15FunctionalSwift6liftA3ySayq1_Gq1_x_q_q0_tXE_SayxGSayq_GSayq0_Gtr2_lF":{"name":"liftA3(_:_:_:_:)","abstract":"<p>Lift a ternary function to actions.</p>"},"Functions.html#/s:15FunctionalSwift3lxgoiySDyq0_q_Gq_xXE_SDyq0_xGtSHR0_r1_lF":{"name":"<^>(_:_:)","abstract":"<p>An infix synonym for <code>map(_:)</code>.</p>"},"Functions.html#/s:15FunctionalSwift2lxoiySDyq_xGx_SDyq_q0_GtSHR_r1_lF":{"name":"<^(_:_:)","abstract":"<p>Replace all locations in the input with the same value."},"Functions.html#/s:15FunctionalSwift2xgoiySDyxq0_GSDyxq_G_q0_tSHRzr1_lF":{"name":"^>(_:_:)","abstract":"<p>Is flipped version of <code>&lt;^</code></p>"},"Functions.html#/s:15FunctionalSwift3lxgoiyAA6EitherOyq_q0_Gq0_xXE_ADyq_xGtr1_lF":{"name":"<^>(_:_:)","abstract":"<p>An infix synonym for <code>map(_:)</code>.</p>"},"Functions.html#/s:15FunctionalSwift2lxoiyAA6EitherOyq_xGx_ADyq_q0_Gtr1_lF":{"name":"<^(_:_:)","abstract":"<p>Replace all locations in the input with the same value. The default definition is <code>map { _ in transform }</code>,"},"Functions.html#/s:15FunctionalSwift2xgoiyAA6EitherOyxq0_GADyxq_G_q0_tr1_lF":{"name":"^>(_:_:)","abstract":"<p>Is flipped version of <code>&lt;^</code></p>"},"Functions.html#/s:15FunctionalSwift3ggsoiyAA6EitherOyxq0_GADyxq_G_AEq_XEtr1_lF":{"name":">>-(_:_:)","abstract":"<p>Sequentially compose two actions, passing any value produced by the first as an argument to the second.</p>"},"Functions.html#/s:15FunctionalSwift3slloiyAA6EitherOyq_q0_GAExXE_ADyq_xGtr1_lF":{"name":"-<<(_:_:)","abstract":"<p>Same as <code>&gt;&gt;-</code>, but with the arguments interchanged.</p>"},"Functions.html#/s:15FunctionalSwift3lmgoiyAA6EitherOyxq0_GADyxq0_q_cG_ADyxq_Gtr1_lF":{"name":"<*>(_:_:)","abstract":"<p>Sequential application.</p>"},"Functions.html#/s:15FunctionalSwift6liftA2yAA6EitherOyq1_q0_Gq0_x_q_tXE_ADyq1_xGADyq1_q_Gtr2_lF":{"name":"liftA2(_:_:_:)","abstract":"<p>Lift a binary function to actions.</p>"},"Functions.html#/s:15FunctionalSwift6liftA3yAA6EitherOyq2_q1_Gq1_x_q_q0_tXE_ADyq2_xGADyq2_q_GADyq2_q0_Gtr3_lF":{"name":"liftA3(_:_:_:_:)","abstract":"<p>Lift a ternary function to actions.</p>"},"Functions.html#/s:15FunctionalSwift3lxgoiyq_Sgq_xXE_xSgtr0_lF":{"name":"<^>(_:_:)","abstract":"<p>An infix synonym for <code>map(_:)</code>.</p>"},"Functions.html#/s:15FunctionalSwift2lxoiyxSgx_q_Sgtr0_lF":{"name":"<^(_:_:)","abstract":"<p>Replace all locations in the input with the same value.</p>"},"Functions.html#/s:15FunctionalSwift2xgoiyq_SgxSg_q_tr0_lF":{"name":"^>(_:_:)","abstract":"<p>Is flipped version of <code>&lt;^</code></p>"},"Functions.html#/s:15FunctionalSwift3ggsoiyq_SgxSg_ACxXEtr0_lF":{"name":">>-(_:_:)","abstract":"<p>Sequentially compose two actions, passing any value produced by the first"},"Functions.html#/s:15FunctionalSwift3slloiyq_SgACxXE_xSgtr0_lF":{"name":"-<<(_:_:)","abstract":"<p>Same as <code>&gt;&gt;-</code>, but with the arguments interchanged.</p>"},"Functions.html#/s:15FunctionalSwift3lmgoiyq_Sgq_xcSg_xSgtr0_lF":{"name":"<*>(_:_:)","abstract":"<p>Sequential application.</p>"},"Functions.html#/s:15FunctionalSwift6liftA2yq0_Sgq0_x_q_tXE_xSgq_Sgtr1_lF":{"name":"liftA2(_:_:_:)","abstract":"<p>Lift a binary function to actions.</p>"},"Functions.html#/s:15FunctionalSwift6liftA3yq1_Sgq1_x_q_q0_tXE_xSgq_Sgq0_Sgtr2_lF":{"name":"liftA3(_:_:_:_:)","abstract":"<p>Lift a ternary function to actions.</p>"},"Functions.html#/s:15FunctionalSwift2idyxxlF":{"name":"id(_:)","abstract":"<p>Identity function.</p>"},"Functions.html#/s:15FunctionalSwift5constyxq_cxr0_lF":{"name":"const(_:)","abstract":"<p><code>const(x)</code> is a unary function which evaluates to <code>x</code> for all inputs.</p>"},"Functions.html#/s:15FunctionalSwift003nvgoiyq0_xcq0_q_c_q_xctr1_lF":{"name":"â€¢(_:_:)","abstract":"<p>Function composition.</p>"},"Functions.html#/s:15FunctionalSwift2looiyq_q_xXE_xtr0_lF":{"name":"<|(_:_:)","abstract":"<p>Application operator. This operator is redundant, since ordinary"},"Functions.html#/s:15FunctionalSwift2ogoiyq_x_q_xXEtr0_lF":{"name":"|>(_:_:)","abstract":"<p>Application operator. This operator is redundant, since ordinary"},"Extensions/Sequence.html#/s:ST15FunctionalSwiftAA6Monoid7ElementRpzrlE7mconcatADyF":{"name":"mconcat()","abstract":"<p>Fold a sequence using monoid.</p>","parent_name":"Sequence"},"Extensions/Collection.html#/s:Sl15FunctionalSwiftE6chunks2ofSay11SubSequenceQzGSi_tF":{"name":"chunks(of:)","abstract":"<p><code>chunks(of: n)</code> splits a list into length-n pieces. The last piece will be","parent_name":"Collection"},"Extensions/Collection.html#/s:Sl15FunctionalSwiftE5split6placesSay11SubSequenceQzGSaySiG_tF":{"name":"split(places:)","abstract":"<p><code>split(places: [])</code> split a list into chunks of the given lengths.","parent_name":"Collection"},"Extensions/Collection.html#/s:Sl15FunctionalSwiftSQ7ElementRpzrlE5split2onSay11SubSequenceQzGAC_tF":{"name":"split(on:)","abstract":"<p>Returns the longest possible subsequences of the collection, in order,","parent_name":"Collection"},"Extensions/Collection.html#/s:Sl15FunctionalSwiftSQ7ElementRpzrlE5split5oneOfSay11SubSequenceQzGqd___tSlRd__ABQyd__ACRSlF":{"name":"split(oneOf:)","abstract":"<p>Split on any of the given elements.</p>","parent_name":"Collection"},"Extensions/Collection.html":{"name":"Collection"},"Extensions/Sequence.html":{"name":"Sequence"},"Enums/Either.html#/s:15FunctionalSwift6EitherO4leftyACyxq_GxcAEmr0_lF":{"name":"left(_:)","abstract":"<p>Left value of <code>Either</code>.</p>","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO5rightyACyxq_Gq_cAEmr0_lF":{"name":"right(_:)","abstract":"<p>Right value of <code>Either</code>.</p>","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO3mapyACyxqd__Gqd__q_XElF":{"name":"map(_:)","abstract":"<p>Evaluates the given closure when this <code>Either</code> instance is <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO5rightq_Sgvp\">right</a></code>,","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO7flatMapyACyxqd__GAEq_XElF":{"name":"flatMap(_:)","abstract":"<p>Evaluates the given closure when this <code>Either</code> instance is not <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO4leftxSgvp\">left</a></code>,","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO5firstyACyqd__q_Gqd__xXElF":{"name":"first(_:)","abstract":"<p>Evaluates the given closure when this <code>Either</code> instance is <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO4leftxSgvp\">left</a></code>,","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO6secondyACyxqd__Gqd__q_XElF":{"name":"second(_:)","abstract":"<p>Evaluates the given closure when this <code>Either</code> instance is <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO5rightq_Sgvp\">right</a></code>,","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO5bimapyACyqd__qd_0_Gqd__xXE_qd_0_q_XEtr0_lF":{"name":"bimap(_:_:)","abstract":"<p>Evaluates the first given closure when this <code>Either</code> instance is <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO4leftxSgvp\">left</a></code>,","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO7mapLeftyACyqd__q_Gqd__xXElF":{"name":"mapLeft(_:)","abstract":"<p>Evaluates the given closure when this <code>Either</code> instance is <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO4leftxSgvp\">left</a></code>,","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO4leftxSgvp":{"name":"left","abstract":"<p>Returns value if the <code>Either</code> instance is <code>left</code> or <code>nil</code> if it is <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO5rightq_Sgvp\">right</a></code></p>","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO5rightq_Sgvp":{"name":"right","abstract":"<p>Returns value if the <code>Either</code> instance is <code>right</code> or <code>nil</code> if it is <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Either.html#/s:15FunctionalSwift6EitherO4leftxSgvp\">left</a></code></p>","parent_name":"Either"},"Enums/Either.html#/s:15FunctionalSwift6EitherO6eitheryqd__qd__xXE_qd__q_XEtlF":{"name":"either(_:_:)","abstract":"<p>Case analysis for the Either type.</p>","parent_name":"Either"},"Enums/Either.html":{"name":"Either","abstract":"<p>The <code>Either</code> type represents values with two possibilities: a value of type <code>Either&lt;A, B&gt;</code> is either <code>left(a)</code> or"},"Classes/MVar.html#/s:15FunctionalSwift4MVarCACyxGycfc":{"name":"init()","abstract":"<p>Create an <code>MVar</code> which is initially empty.</p>","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC5valueACyxGx_tcfc":{"name":"init(value:)","abstract":"<p>Create an <code>MVar</code> which contains the supplied value.</p>","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC4takexyF":{"name":"take()","abstract":"<p>Return the contents of the <code>MVar</code>. If the <code>MVar</code> is currently empty, <code>take()</code> will wait until it is full. After","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC3putyyxF":{"name":"put(_:)","abstract":"<p>Put a value into an <code>MVar</code>. If the <code>MVar</code> is currently full, <code>put(_:)</code> will wait until it becomes empty.</p>","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC4readxyF":{"name":"read()","abstract":"<p>Atomically read the contents of an <code>MVar</code>. If the <code>MVar</code> is currently empty, <code>read()</code> will wait until it is","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC4swapyxxF":{"name":"swap(_:)","abstract":"<p>Take a value from an <code>MVar</code>, put a new value into the <code>MVar</code> and return the value taken. This function is","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC7tryTakexSgyF":{"name":"tryTake()","abstract":"<p>A non-blocking version of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MVar.html#/s:15FunctionalSwift4MVarC4takexyF\">take()</a></code>. The <code>tryTake()</code> function returns immediately. After <code>tryTake()</code>,","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC6tryPutySbxF":{"name":"tryPut(_:)","abstract":"<p>A non-blocking version of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MVar.html#/s:15FunctionalSwift4MVarC3putyyxF\">put(_:)</a></code>. The <code>tryPut(_:)</code> function attempts to put the value <code>a</code> into the <code>MVar</code>.</p>","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC7isEmptySbvp":{"name":"isEmpty","abstract":"<p>Check whether a given <code>MVar</code> is empty.</p>","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC4withyqd__qd__xKXEKlF":{"name":"with(_:)","abstract":"<p><code>with(_:)</code> is an rethrows wrapper for operating on ï£¿the contents of an <code>MVar</code>. This operation rethrow exception","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC7modify_yyxxKXEKF":{"name":"modify_(_:)","abstract":"<p>A rethrow wrapper for modifying the contents of an <code>MVar</code>. Like <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MVar.html#/s:15FunctionalSwift4MVarC4withyqd__qd__xKXEKlF\">with(_:)</a></code>, <code>modify_(_:)</code> won&rsquo;t replace","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC6modifyyqd__x_qd__txKXEKlF":{"name":"modify(_:)","abstract":"<p>A slight variation on <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MVar.html#/s:15FunctionalSwift4MVarC7modify_yyxxKXEKF\">modify_(_:)</a></code> that allows a value to be returned (b) in addition to the modified value","parent_name":"MVar"},"Classes/MVar.html#/s:15FunctionalSwift4MVarC7tryReadxSgyF":{"name":"tryRead()","abstract":"<p>A non-blocking version of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MVar.html#/s:15FunctionalSwift4MVarC4readxyF\">read()</a></code>. The <code>tryRead()</code> function returns immediately, with <code>.none</code> if the <code>MVar</code>","parent_name":"MVar"},"Classes/MVar.html":{"name":"MVar","abstract":"<p>An <code>MVar</code> (pronounced &ldquo;em-var&rdquo;) is a synchronising variable, used for communication between concurrent threads."},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}